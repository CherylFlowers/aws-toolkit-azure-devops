{
    "id": "0c632a66-60d4-498a-88c8-1c69cc057ef1",
    "name": "LambdaNETCoreDeploy",
    "friendlyName": "AWS Lambda .NET Core Deployment",
    "description": "Build, package and deploy, or build and package only, a Serverless .NET Core application or AWS Lambda function",
    "author": "Amazon Web Services",
    "helpMarkDown": "Please refer to [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/) for more information on working with AWS Lambda.",
    "category": "Deploy",
    "visibility": [
        "Build",
        "Release"
    ],
    "demands": [],
    "version": {
        "Major": "1",
        "Minor": "0",
        "Patch": "21"
    },
    "minimumAgentVersion": "1.91.0",
    "instanceNameFormat": "Deploy .NET Core to Lambda: $(functionName) $(stackName)",
    "groups": [
        {
            "name": "deployFunction",
            "displayName": "Lambda Function Properties",
            "isExpanded": true,
            "visibleRule": "command = deployFunction"
        },
        {
            "name": "deployServerless",
            "displayName": "Serverless Application Properties",
            "isExpanded": true,
            "visibleRule": "command = deployServerless"
        },
        {
            "name": "advanced",
            "displayName": "Advanced",
            "isExpanded": true
        }
    ],
    "inputs": [
        {
            "name": "awsCredentials",
            "type": "connectedService:AWS",
            "label": "AWS Credentials",
            "defaultValue": "",
            "required": false,
            "helpMarkDown": "Specifies the AWS credentials (a service endpoint type of 'AWS') to be used by the task in the build agent environment.\n\nIf credentials are not explicitly configured via a service endpoint the task will attempt to obtain the credentials to be used from the environment hosting the build agent using standard AWS environment variables - _AWS_ACCESS_KEY_ID_, _AWS_SECRET_ACCESS_KEY_ and optionally _AWS_SESSION_TOKEN_.\n\nFor tasks running in build agents hosted on Amazon EC2 instances (Windows or Linux) an attempt will be made to obtain credentials using the instance metadata associated with the EC2 instance if no credentials are configured on the task with a service endpoint or set in environment variables."
        },
        {
            "name": "regionName",
            "label": "AWS Region",
            "type": "string",
            "required": false,
            "defaultValue": "",
            "helpMarkDown": "The AWS region code (us-east-1, us-west-2 etc) of the region containing the AWS resource(s) the task will use or create. For more information see [AWS Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html).\n\nIf a region is not explicitly configured the task will attempt to obtain the region to be used using the standard AWS environment variable _AWS_REGION_ in the build agent's environment. Tasks running in build agents hosted on Amazon EC2 instances (Windows or Linux) will also attempt to obtain the region using the instance metadata associated with the EC2 instance if no region is configured on the task or set in the environment variable."
        },
        {
            "name": "command",
            "type": "radio",
            "label": "Deployment Type",
            "defaultValue": "deployFunction",
            "required": true,
            "helpMarkDown": "The type of deployment to perform, or package to build or deploy.\n\n* _Function_ deploys a single function to AWS Lambda, or creates a package zip file for subsequent deployment.\n* _Serverless Application_ performs a deployment using AWS CloudFormation (allowing multiple functions to be deployed at the same time) or builds the application and uploads it to Amazon S3, outputting the serverless template file for subsequent deployment of the updated code using AWS CloudFormation.\n\n__Note:__ both options will perform the relevant NuGet package restore and build operations to create the resulting deployment package.",
            "options": {
                "deployFunction": "Function",
                "deployServerless": "Serverless Application"
            },
            "properties": {
                "EditableOptions": "False"
            }
        },
        {
            "name": "packageOnly",
            "type": "boolean",
            "label": "Create deployment package only",
            "required": true,
            "defaultValue": "false",
            "helpMarkDown": "If selected the task creates the outputs for the selected deployment type but does not perform the deployment to AWS lambda or AWS CloudFormation."
        },
        {
            "name": "packageOutputFile",
            "type": "filePath",
            "label": "Package-only output file",
            "defaultValue": "",
            "required": false,
            "helpMarkDown": "* For a package-only build of a Lambda function project: the output folder and filename of the packaged zip file. This zip file can then be used with the _AWS Lambda Deploy Function_ task to perform the deployment at a later stage.\n\n* For a package-only build of a Serverless Application project: the output folder and filename where the serverless template file, updated to contain the Amazon S3 location of the built project code and artifacts, will be placed. This updated template can then be used with the _AWS CloudFormation Create/Update Stack_ task, or AWS CloudFormation change set tasks, to perform the deployment at a later stage.",
            "visibleRule": "packageOnly = true"
        },
        {
            "name": "lambdaProjectPath",
            "label": "Path to Lambda Project",
            "type": "filePath",
            "required": false,
            "defaultValue": "",
            "helpMarkDown": "The relative path to the location of the Lambda function or serverless application project to package and/or deploy."
        },
        {
            "name": "functionName",
            "type": "string",
            "label": "Function Name",
            "defaultValue": "",
            "required": false,
            "groupName": "deployFunction",
            "helpMarkDown": "The name for the deployed Lambda function."
        },
        {
            "name": "functionRole",
            "type": "string",
            "label": "Function Role",
            "defaultValue": "",
            "required": false,
            "groupName": "deployFunction",
            "helpMarkDown": "The name of the AWS Identity and Access Management Role that provides access to AWS services to the deployed Lambda function."
        },
        {
            "name": "functionHandler",
            "type": "string",
            "label": "Function Handler",
            "defaultValue": "",
            "required": false,
            "groupName": "deployFunction",
            "helpMarkDown": "The function within your code that Lambda calls to begin execution. Format is &lt;assembly-name&gt;::&lt;type-name&gt;::&lt;function-name&gt;."
        },
        {
            "name": "functionMemory",
            "type": "int",
            "label": "Function Memory (MB)",
            "defaultValue": "",
            "required": false,
            "groupName": "deployFunction",
            "helpMarkDown": "Memory allocated to the Lambda function. The value must be in multiples of 64."
        },
        {
            "name": "functionTimeout",
            "type": "int",
            "label": "Function Timout (Seconds)",
            "defaultValue": "",
            "required": false,
            "groupName": "deployFunction",
            "helpMarkDown": "The function execution time at which Lambda should terminate the function."
        },
        {
            "name": "stackName",
            "type": "string",
            "label": "Stack Name",
            "defaultValue": "",
            "required": false,
            "groupName": "deployServerless",
            "helpMarkDown": "The name of the AWS CloudFormation stack to deploy to. This field is required when performing a serverless application deployment, but can be omitted when performing a package-only build of the application."
        },
        {
            "name": "s3Bucket",
            "type": "string",
            "label": "S3 Bucket",
            "defaultValue": "",
            "required": false,
            "groupName": "deployServerless",
            "helpMarkDown": "The name of the S3 bucket used to store the built project code. This field is required when performing a serverless application deployment or package-only build."
        },
        {
            "name": "s3Prefix",
            "type": "string",
            "label": "S3 Prefix",
            "defaultValue": "",
            "required": false,
            "groupName": "deployServerless",
            "helpMarkDown": "The object key prefix to be used for the deployment objects that will be uploaded to S3."
        },
        {
            "name": "additionalArgs",
            "label": "Additional Lambda Tools Command Line Arguments",
            "type": "string",
            "required": false,
            "defaultValue": "",
            "groupName": "advanced",
            "helpMarkDown": "Additional arguments to use when executing the 'dotnet lambda' command to build and package your project."
        }
    ],
    "execution": {
        "Node": {
            "target": "LambdaNETCoreDeploy.js",
            "argumentFormat": ""
        }
    },
    "messages": {
        "DeployingProjectAt": "Processing Lambda project at %s",
        "ReadingDefaultSettingsFile": "Reading existing aws-lambda-tools-defaults.json",
        "ClearingProfileCredentials": "Clearing out profile %s so task credentials will be used.",
        "StartingDotNetRestore": "Beginning dotnet restore",
        "StartingFunctionDeployment": "Beginning Lambda Deployment",
        "StartingServerlessDeployment": "Beginning Serverless Deployment",
        "UnknownDeploymentTypeError": "Unknown deployment type: %s",
        "DotNetCommandFailure": "'dotnet %s' exited with code %d",
        "ProjectPathOrFileDoesNotExist": "Project file or path %s does not exist",
        "CreatingServerlessPackageOnly": "Performing package-only build of serverless application, output template will be placed in %s",
        "CreatingFunctionPackageOnly": "Performing package-only build of function, output package will be placed in %s",
        "PackageAndDeployTaskCompleted": "Completed packaging and deployment of the project",
        "PackageOnlyTaskCompleted": "Completed packaging of the project"
    }
}
